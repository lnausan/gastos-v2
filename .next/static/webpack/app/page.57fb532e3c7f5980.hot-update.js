"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./context/transaction-context.tsx":
/*!*****************************************!*\
  !*** ./context/transaction-context.tsx ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TransactionProvider: () => (/* binding */ TransactionProvider),\n/* harmony export */   useTransactions: () => (/* binding */ useTransactions)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_ui_use_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/ui/use-toast */ \"(app-pages-browser)/./components/ui/use-toast.ts\");\n/* harmony import */ var _components_providers_supabase_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/providers/supabase-provider */ \"(app-pages-browser)/./components/providers/supabase-provider.tsx\");\n/* harmony import */ var _barrel_optimize_names_format_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=format,subMonths!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/subMonths.mjs\");\n/* harmony import */ var _barrel_optimize_names_format_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=format,subMonths!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/format.mjs\");\n/* __next_internal_client_entry_do_not_use__ TransactionProvider,useTransactions auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst TransactionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction TransactionProvider(param) {\n    let { children } = param;\n    _s();\n    const { supabase } = (0,_components_providers_supabase_provider__WEBPACK_IMPORTED_MODULE_3__.useSupabase)();\n    const [transactions, setTransactions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [dollarValues, setDollarValues] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [optimisticTransactions, addOptimisticTransaction] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useOptimistic)(transactions, {\n        \"TransactionProvider.useOptimistic\": (state, param)=>{\n            let { action, data } = param;\n            if (action === \"add\") {\n                return [\n                    ...state,\n                    data\n                ];\n            } else if (action === \"update\") {\n                return state.map({\n                    \"TransactionProvider.useOptimistic\": (t)=>t.id === data.id ? {\n                            ...t,\n                            ...data.transaction\n                        } : t\n                }[\"TransactionProvider.useOptimistic\"]);\n            } else if (action === \"delete\") {\n                return state.filter({\n                    \"TransactionProvider.useOptimistic\": (t)=>t.id !== data.id\n                }[\"TransactionProvider.useOptimistic\"]);\n            }\n            return state;\n        }\n    }[\"TransactionProvider.useOptimistic\"]);\n    const [optimisticDollarValues, addOptimisticDollarValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useOptimistic)(dollarValues, {\n        \"TransactionProvider.useOptimistic\": (state, param)=>{\n            let { action, data } = param;\n            if (action === \"update\") {\n                const existingIndex = state.findIndex({\n                    \"TransactionProvider.useOptimistic.existingIndex\": (d)=>d.month === data.month\n                }[\"TransactionProvider.useOptimistic.existingIndex\"]);\n                if (existingIndex >= 0) {\n                    return state.map({\n                        \"TransactionProvider.useOptimistic\": (d)=>d.month === data.month ? data : d\n                    }[\"TransactionProvider.useOptimistic\"]);\n                } else {\n                    return [\n                        ...state,\n                        data\n                    ];\n                }\n            }\n            return state;\n        }\n    }[\"TransactionProvider.useOptimistic\"]);\n    const { toast } = (0,_components_ui_use_toast__WEBPACK_IMPORTED_MODULE_2__.useToast)();\n    const storageId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useId)();\n    // Cargar transacciones y valores del dólar desde localStorage al iniciar\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"TransactionProvider.useEffect\": ()=>{\n            if (!supabase) return;\n            // 1. Cargar datos de localStorage primero\n            const cachedTransactions = localStorage.getItem(\"transactions-\".concat(storageId));\n            if (cachedTransactions) {\n                try {\n                    const parsedTransactions = JSON.parse(cachedTransactions);\n                    setTransactions(parsedTransactions);\n                    setIsLoading(false) // Ya tenemos datos, no mostrar loading\n                    ;\n                } catch (e) {\n                    console.error('Error al parsear transacciones del localStorage:', e);\n                }\n            }\n            const cachedDollarValues = localStorage.getItem(\"dollar-values-\".concat(storageId));\n            if (cachedDollarValues) {\n                try {\n                    setDollarValues(JSON.parse(cachedDollarValues));\n                } catch (e) {\n                    console.error('Error al parsear valores del dólar del localStorage:', e);\n                }\n            }\n            // 2. Luego cargar desde Supabase en segundo plano\n            const loadData = {\n                \"TransactionProvider.useEffect.loadData\": async ()=>{\n                    try {\n                        const { data: { user }, error: userError } = await supabase.auth.getUser();\n                        if (userError) {\n                            console.error('Error al obtener usuario:', userError);\n                            throw userError;\n                        }\n                        if (!user) {\n                            console.error('No hay usuario autenticado');\n                            return;\n                        }\n                        // Calcular los últimos 6 meses\n                        const today = new Date();\n                        const months = [];\n                        for(let i = 0; i < 6; i++){\n                            const d = (0,_barrel_optimize_names_format_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_4__.subMonths)(today, i);\n                            months.push((0,_barrel_optimize_names_format_subMonths_date_fns__WEBPACK_IMPORTED_MODULE_5__.format)(d, \"yyyy-MM\"));\n                        }\n                        console.log('Buscando transacciones para los meses:', months);\n                        // Traer solo las transacciones de los últimos 6 meses\n                        const { data: transactionsData, error: transactionsError } = await supabase.from('expenses').select('*').eq('user_id', user.id).gte('date', \"\".concat(months[months.length - 1], \"-01\")).lte('date', \"\".concat(months[0], \"-31\")).order('created_at', {\n                            ascending: false\n                        });\n                        if (transactionsError) {\n                            console.error('Error al cargar transacciones:', transactionsError);\n                            throw transactionsError;\n                        }\n                        if (transactionsData) {\n                            console.log('Transacciones cargadas:', transactionsData.length);\n                            setTransactions(transactionsData);\n                            localStorage.setItem(\"transactions-\".concat(storageId), JSON.stringify(transactionsData));\n                        }\n                        console.log('Buscando valores del dólar para los meses:', months);\n                        // Traer todos los valores del dólar del usuario\n                        const loadDollarValues = {\n                            \"TransactionProvider.useEffect.loadData.loadDollarValues\": async ()=>{\n                                if (!supabase) {\n                                    console.error('Supabase no está inicializado');\n                                    return;\n                                }\n                                try {\n                                    // 1. Verificar autenticación\n                                    const { data: { user }, error: userError } = await supabase.auth.getUser();\n                                    if (userError) {\n                                        console.error('Error al obtener usuario:', userError);\n                                        return;\n                                    }\n                                    if (!user) {\n                                        console.error('No hay usuario autenticado');\n                                        return;\n                                    }\n                                    console.log('Cargando historial de valores del dólar para usuario:', user.id);\n                                    // 2. Cargar todos los valores históricos\n                                    const { data, error } = await supabase.from('dollar_values').select('*').eq('user_id', user.id).order('month', {\n                                        ascending: false\n                                    });\n                                    console.log('Respuesta de la carga de dólares:', {\n                                        data,\n                                        error\n                                    });\n                                    if (error) {\n                                        console.error('Error al cargar valores del dólar:', error);\n                                        return;\n                                    }\n                                    if (!data) {\n                                        console.log('No se encontraron valores del dólar');\n                                        setDollarValues([]);\n                                        localStorage.setItem(\"dollar-values-\".concat(storageId), JSON.stringify([]));\n                                        return;\n                                    }\n                                    console.log('Historial de valores del dólar cargados:', data);\n                                    setDollarValues(data);\n                                    localStorage.setItem(\"dollar-values-\".concat(storageId), JSON.stringify(data));\n                                } catch (error) {\n                                    console.error('Error inesperado al cargar valores del dólar:', error);\n                                    setDollarValues([]);\n                                    localStorage.setItem(\"dollar-values-\".concat(storageId), JSON.stringify([]));\n                                }\n                            }\n                        }[\"TransactionProvider.useEffect.loadData.loadDollarValues\"];\n                        // Ejecutar la carga de datos\n                        await loadDollarValues();\n                    } catch (error) {\n                        console.error('Error detallado al cargar datos:', error);\n                        // No mostrar el error al usuario si ya tenemos datos en localStorage\n                        if (transactions.length === 0) {\n                            toast({\n                                title: 'Error al cargar los datos',\n                                description: error instanceof Error ? error.message : 'Error desconocido',\n                                variant: 'destructive'\n                            });\n                        }\n                    } finally{\n                        setIsLoading(false);\n                    }\n                }\n            }[\"TransactionProvider.useEffect.loadData\"];\n            loadData();\n        }\n    }[\"TransactionProvider.useEffect\"], [\n        supabase\n    ]);\n    // Agregar una nueva transacción\n    const addTransaction = async (transaction)=>{\n        if (!supabase) return;\n        try {\n            const { data: { user } } = await supabase.auth.getUser();\n            if (!user) {\n                console.error('No se pudo obtener el usuario autenticado');\n                return;\n            }\n            const expenseToInsert = {\n                amount: transaction.amount,\n                description: transaction.description,\n                date: transaction.date,\n                category_id: transaction.category_id,\n                user_id: user.id,\n                type: transaction.type\n            };\n            console.log('Insertando en Supabase:', expenseToInsert);\n            const { data, error } = await supabase.from('expenses').insert([\n                expenseToInsert\n            ]).select().single();\n            console.log('Respuesta de Supabase:', {\n                data,\n                error\n            });\n            if (error) throw error;\n            // Recargar todas las transacciones para asegurar consistencia\n            const { data: transactionsData, error: transactionsError } = await supabase.from('expenses').select('*').eq('user_id', user.id).order('created_at', {\n                ascending: false\n            });\n            if (transactionsError) throw transactionsError;\n            console.log('Transacciones actualizadas:', transactionsData);\n            setTransactions(transactionsData || []);\n            toast({\n                title: 'Transacción agregada correctamente'\n            });\n        } catch (error) {\n            console.error('Error al agregar transacción:', error);\n            toast({\n                title: 'Error al agregar la transacción'\n            });\n            throw error;\n        }\n    };\n    // Actualizar una transacción existente\n    const updateTransaction = async (id, transaction)=>{\n        if (!supabase) return;\n        try {\n            // Adaptar los campos al esquema de expenses\n            const expenseToUpdate = {};\n            if (transaction.amount !== undefined) expenseToUpdate.amount = transaction.amount;\n            if (transaction.description !== undefined) expenseToUpdate.description = transaction.description;\n            if (transaction.date !== undefined) expenseToUpdate.date = transaction.date;\n            if (transaction.category_id !== undefined) expenseToUpdate.category_id = transaction.category_id;\n            if (transaction.type !== undefined) expenseToUpdate.type = transaction.type;\n            console.log('Actualizando transacción:', {\n                id,\n                ...expenseToUpdate\n            });\n            const { data, error } = await supabase.from('expenses').update(expenseToUpdate).eq('id', id).select().single();\n            if (error) throw error;\n            console.log('Transacción actualizada:', data);\n            // Recargar todas las transacciones para asegurar consistencia\n            const { data: transactionsData, error: transactionsError } = await supabase.from('expenses').select('*').order('created_at', {\n                ascending: false\n            });\n            if (transactionsError) throw transactionsError;\n            console.log('Transacciones actualizadas:', transactionsData);\n            setTransactions(transactionsData || []);\n            toast({\n                title: 'Transacción actualizada correctamente'\n            });\n        } catch (error) {\n            console.error('Error al actualizar transacción:', error);\n            toast({\n                title: 'Error al actualizar la transacción'\n            });\n            throw error;\n        }\n    };\n    // Eliminar una transacción\n    const deleteTransaction = async (id)=>{\n        if (!supabase) return;\n        try {\n            console.log('Eliminando transacción:', id);\n            const { error } = await supabase.from('expenses').delete().eq('id', id);\n            if (error) throw error;\n            // Recargar todas las transacciones para asegurar consistencia\n            const { data: transactionsData, error: transactionsError } = await supabase.from('expenses').select('*').order('created_at', {\n                ascending: false\n            });\n            if (transactionsError) throw transactionsError;\n            console.log('Transacciones actualizadas:', transactionsData);\n            setTransactions(transactionsData || []);\n            toast({\n                title: 'Transacción eliminada correctamente'\n            });\n        } catch (error) {\n            console.error('Error al eliminar transacción:', error);\n            toast({\n                title: 'Error al eliminar la transacción'\n            });\n            throw error;\n        }\n    };\n    // Obtener transacciones de un mes específico\n    const getMonthTransactions = (month)=>{\n        return transactions.filter((t)=>t.date.startsWith(month));\n    };\n    // Obtener resumen de un mes específico\n    const getMonthSummary = (month)=>{\n        const monthTransactions = getMonthTransactions(month);\n        const income = monthTransactions.filter((t)=>t.type === 'ingreso').reduce((sum, t)=>sum + t.amount, 0);\n        const expense = monthTransactions.filter((t)=>t.type === 'gasto').reduce((sum, t)=>sum + t.amount, 0);\n        return {\n            month,\n            income,\n            expense,\n            balance: income - expense\n        };\n    };\n    // Obtener resumen por categoría para un mes específico\n    const getMonthCategorySummary = (month, type)=>{\n        const monthTransactions = getMonthTransactions(month).filter((t)=>t.type === type);\n        const categorySummary = {};\n        monthTransactions.forEach((transaction)=>{\n            if (!categorySummary[transaction.category_id]) {\n                categorySummary[transaction.category_id] = 0;\n            }\n            categorySummary[transaction.category_id] += transaction.amount;\n        });\n        return Object.entries(categorySummary).map((param)=>{\n            let [category, amount] = param;\n            return {\n                category,\n                amount\n            };\n        }).sort((a, b)=>b.amount - a.amount);\n    };\n    // Obtener los últimos 6 meses para el gráfico de barras\n    const getLastSixMonthsSummary = ()=>{\n        const today = new Date();\n        const months = [];\n        for(let i = 0; i < 6; i++){\n            const d = new Date(today.getFullYear(), today.getMonth() - i, 1);\n            const month = \"\".concat(d.getFullYear(), \"-\").concat(String(d.getMonth() + 1).padStart(2, '0'));\n            months.push(month);\n        }\n        return months.map((month)=>getMonthSummary(month)).reverse();\n    };\n    // Obtener todos los meses del año actual para el gráfico de líneas\n    const getAllMonthsSummary = ()=>{\n        // Obtener todos los meses únicos de las transacciones\n        const months = Array.from(new Set(transactions.map((t)=>t.date.substring(0, 7)))).sort((a, b)=>b.localeCompare(a)) // Ordenar de más reciente a más antiguo\n        ;\n        return months.map((month)=>{\n            const monthTransactions = transactions.filter((t)=>t.date.startsWith(month));\n            const income = monthTransactions.filter((t)=>t.type === 'ingreso').reduce((sum, t)=>sum + Number(t.amount), 0);\n            const expense = monthTransactions.filter((t)=>t.type === 'gasto').reduce((sum, t)=>sum + Number(t.amount), 0);\n            return {\n                month,\n                income,\n                expense,\n                balance: income - expense\n            };\n        });\n    };\n    // Obtener el valor del dólar para un mes específico\n    const getDollarValue = (month)=>{\n        return dollarValues.find((d)=>d.month === month);\n    };\n    // Actualizar el valor del dólar para un mes específico\n    const updateDollarValue = async (month, value)=>{\n        if (!supabase) {\n            console.error('Supabase no está inicializado');\n            throw new Error('Supabase no está inicializado');\n        }\n        try {\n            // 1. Verificar autenticación\n            const { data: { user }, error: userError } = await supabase.auth.getUser();\n            if (userError) {\n                console.error('Error al obtener usuario:', userError);\n                throw new Error('Error al obtener usuario');\n            }\n            if (!user) {\n                console.error('No hay usuario autenticado');\n                throw new Error('No hay usuario autenticado');\n            }\n            console.log('Intentando actualizar valor del dólar:', {\n                user_id: user.id,\n                month,\n                value\n            });\n            // Intentar actualizar primero\n            const { data: updateData, error: updateError } = await supabase.from('dollar_values').update({\n                value\n            }).eq('user_id', user.id).eq('month', month).select().single();\n            // Si no existe el registro, intentar insertar\n            if (updateError && updateError.code === 'PGRST116') {\n                console.log('Registro no encontrado, intentando insertar...');\n                const { data: insertData, error: insertError } = await supabase.from('dollar_values').insert({\n                    user_id: user.id,\n                    month,\n                    value\n                }).select().single();\n                if (insertError) {\n                    console.error('Error al insertar:', insertError);\n                    throw new Error(\"Error al insertar: \".concat(insertError.message));\n                }\n                // Actualizar el estado local\n                setDollarValues((prev)=>{\n                    const newValues = [\n                        ...prev\n                    ];\n                    const index = newValues.findIndex((d)=>d.month === month);\n                    if (index >= 0) {\n                        newValues[index] = insertData;\n                    } else {\n                        newValues.push(insertData);\n                    }\n                    return newValues;\n                });\n                // Actualizar localStorage\n                localStorage.setItem(\"dollar-values-\".concat(storageId), JSON.stringify(dollarValues));\n                return insertData;\n            }\n            if (updateError) {\n                console.error('Error al actualizar:', updateError);\n                throw new Error(\"Error al actualizar: \".concat(updateError.message));\n            }\n            // Actualizar el estado local\n            setDollarValues((prev)=>{\n                const newValues = [\n                    ...prev\n                ];\n                const index = newValues.findIndex((d)=>d.month === month);\n                if (index >= 0) {\n                    newValues[index] = updateData;\n                } else {\n                    newValues.push(updateData);\n                }\n                return newValues;\n            });\n            // Actualizar localStorage\n            localStorage.setItem(\"dollar-values-\".concat(storageId), JSON.stringify(dollarValues));\n            return updateData;\n        } catch (error) {\n            console.error('Error al actualizar el valor del dólar:', error);\n            throw error;\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(TransactionContext.Provider, {\n        value: {\n            transactions,\n            dollarValues,\n            addTransaction,\n            updateTransaction,\n            deleteTransaction,\n            getMonthTransactions,\n            getMonthSummary,\n            getLastSixMonthsSummary,\n            getAllMonthsSummary,\n            getDollarValue,\n            updateDollarValue,\n            getMonthCategorySummary,\n            isLoading\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/lnausan/Documents/Gastos V2/context/transaction-context.tsx\",\n        lineNumber: 515,\n        columnNumber: 5\n    }, this);\n}\n_s(TransactionProvider, \"BfKdZl4tHdqFexW0dynwWq34vGQ=\", false, function() {\n    return [\n        _components_providers_supabase_provider__WEBPACK_IMPORTED_MODULE_3__.useSupabase,\n        react__WEBPACK_IMPORTED_MODULE_1__.useOptimistic,\n        react__WEBPACK_IMPORTED_MODULE_1__.useOptimistic,\n        _components_ui_use_toast__WEBPACK_IMPORTED_MODULE_2__.useToast,\n        react__WEBPACK_IMPORTED_MODULE_1__.useId\n    ];\n});\n_c = TransactionProvider;\nfunction useTransactions() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(TransactionContext);\n    if (context === undefined) {\n        throw new Error(\"useTransactions must be used within a TransactionProvider\");\n    }\n    return context;\n}\n_s1(useTransactions, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./context/transaction-context.tsx\n"));

/***/ })

});